{{- if and .Values.postgresql.enabled .Values.postgresql.shipping.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.postgresql.shipping.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "nexus-database.postgresql.labels" . | nindent 4 }}
    app: {{ .Values.postgresql.shipping.name }}
    service: shipping-service
spec:
  serviceName: {{ .Values.postgresql.shipping.name }}-service
  replicas: {{ .Values.postgresql.shipping.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.postgresql.shipping.name }}
  template:
    metadata:
      labels:
        {{- include "nexus-database.postgresql.labels" . | nindent 8 }}
        app: {{ .Values.postgresql.shipping.name }}
        service: shipping-service
    spec:
      {{- if .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.global.nodeSelector | nindent 8 }}
      {{- end }}
      containers:
        - name: postgres
          image: "{{ .Values.postgresql.shipping.image.repository }}:{{ .Values.postgresql.shipping.image.tag }}"
          imagePullPolicy: {{ .Values.postgresql.shipping.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.postgresql.shipping.service.port }}
              name: postgres
          env:
            - name: POSTGRES_DB
              value: {{ .Values.postgresql.shipping.database.name }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.shipping.name }}-secret
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.shipping.name }}-secret
                  key: password
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-local=trust --auth-host=scram-sha-256"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-config
              mountPath: /etc/postgresql
              readOnly: true
          resources:
            {{- toYaml .Values.postgresql.shipping.resources | nindent 12 }}
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - $(POSTGRES_USER)
                - -d
                - $(POSTGRES_DB)
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - $(POSTGRES_USER)
                - -d
                - $(POSTGRES_DB)
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            exec:
              command:
                - pg_isready
                - -U
                - $(POSTGRES_USER)
                - -d
                - $(POSTGRES_DB)
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 12
      volumes:
        - name: postgres-config
          configMap:
            name: {{ .Values.postgresql.shipping.name }}-config
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
        labels:
          {{- include "nexus-database.postgresql.labels" . | nindent 10 }}
          app: {{ .Values.postgresql.shipping.name }}
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.postgresql.shipping.storage.size }}
        storageClassName: {{ .Values.global.storageClass }}
{{- end }}
